#!/usr/bin/env bash
# -*- mode: shell-script; -*-
#
# cmake_snsw
#
# A bash script to install all nemo software chain through cmake
#
#      Author: X. Garrido
#        Date: 2012-04-20
# Last update: 2012-04-20
#
# History:
#  2012-04-20 XG: adapted to NEMO machines
#  2012-12-17 XG: use config file for svn co of aggregators
#

appname="cmake_snsw"
the_base_dir=/tmp

the_pkgtools_dir=

function my_exit ()
{
    exit $1
}

function print_usage ()
{
    cat <<EOF

  ${appname}

  Usage:

    ${appname} -h | --help : print this help then exit

  Options:

    -h
    --help    : print this help then exit

    -d
    --debug   : print debug mode informations

    -D
    --devel   : print devel mode informations

    -v
    --verbose : verbose print

  Available modes are:

    ${appname} [OPTION] build : build package
            OPTION:
                --base-dir    : set base directory to install all softs
                --keep-source : do not remove source directory
                --with-test   : after building, test will be performed
                --install-third-party-software : install third party software
                --skip-third-party-software    : do not install third party software (default)
                --skip-file-permission         : do not restore file permission (default)
                
                --config-file [FILE] : load a config file containing SVN path to aggregators 

                --skip [Cadfael/Bayeux/Channel/Falaise/Chevreuse] : do not recompile one of this aggregator
                --only [Cadfael/Bayeux/Channel/Falaise/Chevreuse] : only recompile one of this aggregator

    ${appname} test           : test packages

    ${appname} reset          : reset all components i.e. remove all directory

EOF
    return 0
}

#######################################################

if [ "x${the_pkgtools_dir}" == "x" ]; then
    which svn > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        sudo apt-get install subversion
    fi

    if [ "x${PKGTOOLS_ROOT}" != "x" ]; then
        the_pkgtools_dir=${PKGTOOLS_ROOT}
    else
        the_pkgtools_dir=${the_base_dir}/pkgtools/trunk
        svn co https://nemo.lpc-caen.in2p3.fr/svn/pkgtools/trunk ${the_pkgtools_dir}
        if [ $? -ne 0 ]; then
            echo "ERROR: ${appname}: Checking out 'pkgtools' package fails !"
            my_exit 1
        fi
    fi
fi

libpkgtools_sh=${the_pkgtools_dir}/lib/libpkgtools.sh
if [ ! -f ${libpkgtools_sh} ]; then
    echo " ERROR: ${appname}: Cannot find '${libpkgtools_sh}' setup file ! Abort !" >&2
    my_exit 1
fi

source ${libpkgtools_sh}

pkgtools__msg_not_using_verbose
pkgtools__msg_not_using_debug
pkgtools__msg_not_using_devel
pkgtools__msg_not_using_date
pkgtools__msg_using_color
pkgtools__ui_not_using_gui

#######################################################

with_test=0
keep_source_file=1
parse_switch=1
skip_third_party_software=1
skip_file_permission=1
config_file=

while [ -n "$1" ]; do
    token="$1"
    if [ "${token:0:1}" = "-" ]; then
  opt=${token}
	if [ ${parse_switch} = 0 ]; then
	    break
	fi
	if [ "${opt}" = "-h" -o "${opt}" = "--help" ]; then
	    print_usage
            exit 0
	elif [ "${opt}" = "-d" -o "${opt}" = "--debug" ]; then
	    pkgtools__msg_using_debug
	elif [ "${opt}" = "-D" -o "${opt}" = "--devel" ]; then
	    pkgtools__msg_using_devel
	elif [ "${opt}" = "-v" -o "${opt}" = "--verbose" ]; then
	    pkgtools__msg_using_verbose
  elif [ "${opt}" = "-t" -o "${opt}" = "--with-test" ]; then
      with_test=1
        elif [ "${opt}" = "-b" -o "${opt}" = "--base-dir" ]; then
            shift 1
            the_base_dir=$1
        elif [ "${opt}" = "--skip-third-party-software" ]; then
            skip_third_party_software=1
        elif [ "${opt}" = "--install-third-party-software" ]; then
            skip_third_party_software=0
        elif [ "${opt}" = "--skip-file-permission" ]; then
            skip_file_permission=1
        elif [ "${opt}" = "--config-file" ]; then
            shift 1
            config_file="$1"
	      else
	    pkgtools__msg_error "Invalid option!"
	    my_exit 1
	fi
    else
	arg=${token}
	parse_switch=0
	if [ -z "${action_mode}" ]; then
	    if [ "${arg}" = "build" ]; then
                action_mode="build"
	    elif [ "${arg}" = "test" ]; then
                action_mode="test"
	    elif [ "${arg}" = "reset" ]; then
                action_mode="reset"
	    else
		pkgtools__msg_error "Invalid argument!"
		my_exit 1
	    fi
	else
	    # remaining arguments on command line are kept in "$@"
	    pkgtools__msg_devel "BREAK !"
	    break
	fi
    fi
    shift 1
done

pkgtools__msg_devel "action_mode=${action_mode}"
pkgtools__msg_devel "args=$@"

#######################################################

function do_install_third_party_software ()
{
    __pkgtools__at_function_enter do_install_third_party_software
    local is_ubuntu=$(cat /etc/lsb-release | head -n 1 | cut -d'=' -f2)
    if [ "${is_ubuntu}" != "Ubuntu" ]; then
        pkgtools__msg_error "Installation of third party software only available on Ubuntu"
        __pkgtools__at_function_exit
        return 1
    fi

    local list_package="
build-essential  \
gfortran         \
cmake            \
libx11-dev       \
libxpm-dev       \
libxft-dev       \
libxext-dev      \
xlibmesa-glu-dev \
python-dev       \
libxml2-dev      \
zlib1g-dev       \
libbz2-dev
"
    sudo apt-get install ${list_package}
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Installation of third party software"
        __pkgtools__at_function_exit
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

cadfael_version=trunk
cadfael_dir=${the_base_dir}/cadfael
cadfael_logfile="/tmp/cadfael.log"

bayeux_default_version=trunk
bayeux_dir=${the_base_dir}/bayeux
bayeux_logfile="/tmp/bayeux.log"

channel_default_version=trunk
channel_dir=${the_base_dir}/channel
channel_logfile="/tmp/channel.log"

falaise_default_version=trunk
falaise_dir=${the_base_dir}/falaise
falaise_logfile="/tmp/falaise.log"

chevreuse_default_version=trunk
chevreuse_dir=${the_base_dir}/chevreuse
chevreuse_logfile="/tmp/chevreuse.log"

#######################################################

function parse_config_file ()
{
    __pkgtools__at_function_enter parse_config_file
    local rfile="$1"
    if [ ! -f ${rfile} ]; then
	__pkgtools__at_function_exit
	return 1
    fi

    cadfael_version=$(cat ${rfile}   | grep "^cadfael_version="   | cut -d= -f2)
    bayeux_version=$(cat ${rfile}    | grep "^bayeux_version="    | cut -d= -f2)
    channel_version=$(cat ${rfile}   | grep "^channel_version="   | cut -d= -f2)
    falaise_version=$(cat ${rfile}   | grep "^falaise_version="   | cut -d= -f2)
    chevreuse_version=$(cat ${rfile} | grep "^chevreuse_version=" | cut -d= -f2)

    if [ "x${cadfael_version}" != "x" ]; then
    	pkgtools__msg_notice "Cadfael version   = '${cadfael_version}'"
    else
      cadfael_version=${cadfael_default_version}
    fi
    if [ "x${bayeux_version}" != "x" ]; then
    	pkgtools__msg_notice "Bayeux version    = '${bayeux_version}'"
    else
      bayeux_version=${bayeux_default_version}
    fi
    if [ "x${channel_version}" != "x" ]; then
    	pkgtools__msg_notice "Channel version   = '${channel_version}'"
    else
      channel_version=${channel_default_version}
    fi
    if [ "x${falaise_version}" != "x" ]; then
    	pkgtools__msg_notice "Falaise version   = '${falaise_version}'"
    else
      falaise_version=${falaise_default_version}
    fi
    if [ "x${chevreuse_version}" != "x" ]; then
    	pkgtools__msg_notice "Chevreuse version = '${chevreuse_version}'"
    else
      chevreuse_version=${chevreuse_default_version}
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_build_cadfael ()
{
    __pkgtools__at_function_enter do_build_cadfael

    local opwd=${PWD}
    local cadfael_scratch=${cadfael_dir}

    if [ ! -d ${cadfael_scratch} ]; then
        pkgtools__msg_notice "Cadfael directory '${cadfael_scratch}' will be created"
        mkdir -p ${cadfael_scratch}
    fi

    pkgtools__msg_notice "Start installation of Cadfael components..."

    cd ${cadfael_scratch}

    local configure_option=
    if [ ${with_test} -eq 1 ]; then
        configure_option=" --with-test"
    else
        configure_option=" --without-test"
    fi

    if [ -f ${cadfael_logfile} ]; then
        rm ${cadfael_logfile}
    fi

    if [ ! -d ${cadfael_dir}/trunk ]; then
        pkgtools__msg_notice "Check out Cadfael sources"
        svn co https://nemo.lpc-caen.in2p3.fr/svn/Cadfael/${cadfael_version} ${cadfael_version} | tee -a ${cadfael_logfile} 2>&1
    fi

    cd ${cadfael_version}
    svn up > ${cadfael_logfile} 2>&1

    pkgtools__msg_notice "Configure Cadfael..."
    ./pkgtools.d/pkgtool configure \
        --install-prefix     ${cadfael_dir}/install/${cadfael_version} \
        --ep-build-directory ${cadfael_scratch}/build/${cadfael_version}   \
        --download-directory ${cadfael_scratch}/download \
        --with-all --without-mysql --without-hdf5 --without-systemc \
   	--without-python --root-version 5.34.00 --boost-version 1.51.0 \
        ${configure_option} | tee -a ${cadfael_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Cadfael components have not been configured properly! Check log file @ ${cadfael_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    pkgtools__msg_notice "Building and installing Cadfael..."
    ./pkgtools.d/pkgtool install | tee -a ${cadfael_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Cadfael components have not been installed properly! Check log file @ ${cadfael_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    if [ ${skip_file_permission} -eq 0 ]; then
        pkgtools__msg_notice "Restoring file permission..."
        /exp/nemo/snsw/admin_tools/set_permission --directory-name ${cadfael_dir}/install/${cadfael_version}
    fi

    cd ${opwd}
    __pkgtools__at_function_exit
    return 0
}

function do_source_cadfael ()
{
    __pkgtools__at_function_enter do_source_cadfael

    source ${cadfael_dir}/install/${cadfael_version}/etc/cadfael_setup.sh >> ${cadfael_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Cadfael components can not be sourced!"
        return 1
    fi
    do_cadfael_all_setup >> ${cadfael_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "All Cadfael components can not be sourced!"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_build_bayeux ()
{
    __pkgtools__at_function_enter do_build_bayeux

    local opwd=${PWD}
    local bayeux_scratch=${bayeux_dir}

    if [ ! -d ${bayeux_scratch} ]; then
        pkgtools__msg_notice "Bayeux directory '${bayeux_scratch}' will be created"
        mkdir -p ${bayeux_scratch}
    fi

    pkgtools__msg_notice "Start installation of Bayeux components..."

    cd ${bayeux_scratch}

    local configure_option=
    if [ ${with_test} -eq 1 ]; then
        configure_option=" --with-test"
    else
        configure_option=" --without-test"
    fi

    if [ -f ${bayeux_logfile} ]; then
        rm ${bayeux_logfile}
    fi

    if [ ! -d ${bayeux_scratch}/trunk ]; then
        pkgtools__msg_notice "Check out Bayeux sources"
        svn co https://nemo.lpc-caen.in2p3.fr/svn/Bayeux/${bayeux_version} ${bayeux_version} | tee -a ${bayeux_logfile} 2>&1
    fi

    cd ${bayeux_version}
    svn up | tee -a ${bayeux_logfile} 2>&1

    pkgtools__msg_notice "Configure Bayeux..."
    ./pkgtools.d/pkgtool configure \
        --install-prefix     ${bayeux_dir}/install/${bayeux_version} \
        --ep-build-directory ${bayeux_scratch}/build/${bayeux_version}   \
        --download-directory ${bayeux_scratch}/download \
        --config ${bayeux_version} \
        --with-all \
        ${configure_option} | tee -a ${bayeux_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Bayeux components have not been configured properly! Check log file @ ${bayeux_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    pkgtools__msg_notice "Building and installing Bayeux..."
    ./pkgtools.d/pkgtool install | tee -a ${bayeux_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Bayeux components have not been installed properly! Check log file @ ${bayeux_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    if [ ${skip_file_permission} -eq 0 ]; then
        pkgtools__msg_notice "Restoring file permission..."
        /exp/nemo/snsw/admin_tools/set_permission --directory-name ${bayeux_dir}/install/${bayeux_version}
    fi

    cd ${opwd}
    __pkgtools__at_function_exit
    return 0
}

function do_source_bayeux ()
{
    __pkgtools__at_function_enter do_source_bayeux

    source ${bayeux_dir}/install/${bayeux_version}/etc/bayeux_setup.sh >> ${bayeux_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Bayeux components can not be sourced!"
        return 1
    fi
    do_bayeux_all_setup >> ${bayeux_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "All Bayeux components can not be sourced!"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_build_channel ()
{
    __pkgtools__at_function_enter do_build_channel

    local opwd=${PWD}
    local channel_scratch=${channel_dir}

    if [ ! -d ${channel_scratch} ]; then
        pkgtools__msg_notice "Channel directory '${channel_scratch}' will be created"
        mkdir -p ${channel_scratch}
    fi

    pkgtools__msg_notice "Start installation of Channel components..."

    cd ${channel_scratch}

    local configure_option=
    if [ ${with_test} -eq 1 ]; then
        configure_option=" --with-test"
    else
        configure_option=" --without-test"
    fi

    if [ -f ${channel_logfile} ]; then
        rm ${channel_logfile}
    fi

    if [ ! -d ${channel_scratch}/trunk ]; then
        pkgtools__msg_notice "Check out Channel sources"
        svn co https://nemo.lpc-caen.in2p3.fr/svn/snsw/devel/Channel/${channel_version} ${channel_version} | tee -a ${channel_logfile} 2>&1
    fi

    cd ${channel_version}
    svn up | tee -a ${channel_logfile} 2>&1

    pkgtools__msg_notice "Configure Channel..."
    ./pkgtools.d/pkgtool configure \
        --install-prefix     ${channel_dir}/install/${channel_version} \
        --ep-build-directory ${channel_scratch}/build/${channel_version}   \
        --download-directory ${channel_scratch}/download \
        --config ${channel_version} \
        --with-all \
        ${configure_option} | tee -a ${channel_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Channel components have not been configured properly! Check log file @ ${channel_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    pkgtools__msg_notice "Building and installing Channel..."
    ./pkgtools.d/pkgtool install | tee -a ${channel_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Channel components have not been installed properly! Check log file @ ${channel_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    if [ ${skip_file_permission} -eq 0 ]; then
        pkgtools__msg_notice "Restoring file permission..."
        /exp/nemo/snsw/admin_tools/set_permission --directory-name ${channel_dir}/install/${channel_version}
    fi

    cd ${opwd}
    __pkgtools__at_function_exit
    return 0
}

function do_source_channel ()
{
    __pkgtools__at_function_enter do_source_channel

    source ${channel_dir}/install/${channel_version}/etc/channel_setup.sh >> ${channel_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Channel components can not be sourced!"
        return 1
    fi
    do_channel_all_setup >> ${channel_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "All Channel components can not be sourced!"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_build_falaise ()
{
    __pkgtools__at_function_enter do_build_falaise

    local opwd=${PWD}
    local falaise_scratch=${falaise_dir}

    if [ ! -d ${falaise_scratch} ]; then
        pkgtools__msg_notice "Falaise directory '${falaise_scratch}' will be created"
        mkdir -p ${falaise_scratch}
    fi

    pkgtools__msg_notice "Start installation of Falaise components..."

    cd ${falaise_scratch}

    local configure_option=
    if [ ${with_test} -eq 1 ]; then
        configure_option=" --with-test"
    else
        configure_option=" --without-test"
    fi

    if [ -f ${falaise_logfile} ]; then
        rm ${falaise_logfile}
    fi

    if [ ! -d ${falaise_scratch}/trunk ]; then
        pkgtools__msg_notice "Check out Falaise sources"
        svn co https://nemo.lpc-caen.in2p3.fr/svn/snsw/devel/Falaise/${falaise_version} ${falaise_version} | tee -a ${falaise_logfile} 2>&1
    fi

    cd ${falaise_version}
    svn up | tee -a ${falaise_logfile} 2>&1

    pkgtools__msg_notice "Configure Falaise..."
    ./pkgtools.d/pkgtool configure \
        --install-prefix     ${falaise_dir}/install/${falaise_version} \
        --ep-build-directory ${falaise_scratch}/build/${falaise_version}   \
        --download-directory ${falaise_scratch}/download \
        --config ${falaise_version} \
        --with-all --with-snanalysis \
        ${configure_option} | tee -a ${falaise_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Falaise components have not been configured properly! Check log file @ ${falaise_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    pkgtools__msg_notice "Building and installing Falaise..."
    ./pkgtools.d/pkgtool install | tee -a ${falaise_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Falaise components have not been installed properly! Check log file @ ${falaise_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    if [ ${skip_file_permission} -eq 0 ]; then
        pkgtools__msg_notice "Restoring file permission..."
        /exp/nemo/snsw/admin_tools/set_permission --directory-name ${falaise_dir}/install/${falaise_version}
    fi

    cd ${opwd}
    __pkgtools__at_function_exit
    return 0
}

function do_source_falaise ()
{
    __pkgtools__at_function_enter do_source_falaise

    source ${falaise_dir}/install/${falaise_version}/etc/falaise_setup.sh >> ${falaise_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Falaise components can not be sourced!"
        return 1
    fi
    do_falaise_all_setup >> ${falaise_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "All Falaise components can not be sourced!"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_build_chevreuse ()
{
    __pkgtools__at_function_enter do_build_chevreuse

    local opwd=${PWD}
    local chevreuse_scratch=${chevreuse_dir}

    if [ ! -d ${chevreuse_scratch} ]; then
        pkgtools__msg_notice "Chevreuse directory '${chevreuse_scratch}' will be created"
        mkdir -p ${chevreuse_scratch}
    fi

    pkgtools__msg_notice "Start installation of Chevreuse components..."

    cd ${chevreuse_scratch}

    local configure_option=
    if [ ${with_test} -eq 1 ]; then
        configure_option=" --with-test"
    else
        configure_option=" --without-test"
    fi

    if [ -f ${chevreuse_logfile} ]; then
        rm ${chevreuse_logfile}
    fi

    if [ ! -d ${chevreuse_scratch}/trunk ]; then
        pkgtools__msg_notice "Check out Chevreuse sources"
        svn co https://nemo.lpc-caen.in2p3.fr/svn/snsw/devel/Chevreuse/${chevreuse_version} ${chevreuse_version} | tee -a ${chevreuse_logfile} 2>&1
    fi

    cd ${chevreuse_version}
    svn up | tee -a ${chevreuse_logfile} 2>&1

    pkgtools__msg_notice "Configure Chevreuse..."
    ./pkgtools.d/pkgtool configure \
        --install-prefix     ${chevreuse_dir}/install/${chevreuse_version} \
        --ep-build-directory ${chevreuse_scratch}/build/${chevreuse_version}   \
        --download-directory ${chevreuse_scratch}/download \
        --config ${chevreuse_version} \
        --with-all --with-snanalysis \
        ${configure_option} | tee -a ${chevreuse_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Chevreuse components have not been configured properly! Check log file @ ${chevreuse_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    pkgtools__msg_notice "Building and installing Chevreuse..."
    ./pkgtools.d/pkgtool install | tee -a ${chevreuse_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Chevreuse components have not been installed properly! Check log file @ ${chevreuse_logfile}"
        cd ${opwd}
        __pkgtools__at_function_exit
        return 1
    fi

    if [ ${skip_file_permission} -eq 0 ]; then
        pkgtools__msg_notice "Restoring file permission..."
        /exp/nemo/snsw/admin_tools/set_permission --directory-name ${chevreuse_dir}/install/${chevreuse_version}
    fi

    cd ${opwd}
    __pkgtools__at_function_exit
    return 0
}

function do_source_chevreuse ()
{
    __pkgtools__at_function_enter do_source_chevreuse

    source ${chevreuse_dir}/install/${chevreuse_version}/etc/chevreuse_setup.sh >> ${chevreuse_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Chevreuse components can not be sourced!"
        return 1
    fi
    do_chevreuse_all_setup >> ${chevreuse_logfile} 2>&1
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "All Chevreuse components can not be sourced!"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################################

function do_source ()
{
    __pkgtools__at_function_enter do_source

    do_source_cadfael
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Cadfael failed !"
	return 1
    fi

    do_source_bayeux
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Bayeux failed !"
	return 1
    fi

    do_source_channel
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Channel failed !"
	return 1
    fi

    do_source_falaise
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Falaise failed !"
	return 1
    fi

    do_source_chevreuse
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Chevreuse failed !"
	return 1
    fi

   __pkgtools__at_function_exit
    return 0
}

function do_build ()
{
    __pkgtools__at_function_enter do_build

    local only_build=
    local skip_build=
    while [ -n "${1}" ]; do
	local token="$1"
	if [ "x${token:0:1}" = "x-" ]; then
	    local opt=${token}
	    if [ "${opt}" = "-k" -o "${opt}" = "--do-not-keep-source" ]; then
		keep_source_file=0
	    elif [ "${opt}" = "--skip" ]; then
                shift 1
                skip_build=$1
	    elif [ "${opt}" = "--only" ]; then
                shift 1
                only_build=$1
	    else
		pkgtools__msg_warning "Ignoring '${opt}' option !"
	    fi
	else
	    arg=${token}
	    pkgtools__msg_warning "Ignoring '${arg}' argument !"
	fi

	shift 1
    done

    local build_cadfael=1
    local build_bayeux=1
    local build_channel=1
    local build_falaise=1
    local build_chevreuse=1

    if [ "x${only_build}" != "x" ]; then
        if [ "x${only_build}" = "xCadfael" ]; then
            build_cadfael=1
	    build_bayeux=0
	    build_channel=0
	    build_falaise=0
            build_channel=0
        elif [ "x${only_build}" = "xBayeux" ]; then
            build_cadfael=0
	    build_bayeux=1
	    build_channel=0
	    build_falaise=0
            build_chevreuse=0
        elif [ "x${only_build}" = "xChannel" ]; then
            build_cadfael=0
	    build_bayeux=0
	    build_channel=1
	    build_falaise=0
            build_chevreuse=0
        elif [ "x${only_build}" = "xFalaise" ]; then
            build_cadfael=0
	    build_bayeux=0
	    build_channel=0
	    build_falaise=1
            build_chevreuse=0
        elif [ "x${only_build}" = "xChevreuse" ]; then
            build_cadfael=0
	    build_bayeux=0
	    build_channel=0
	    build_falaise=0
            build_chevreuse=1
        else
            pkgtools__msg_error "'${only_build}' package is not known! Abort!"
            __pkgtools__at_function_exit
            return 1
        fi
    fi

    if [ "x${skip_build}" != "x" ]; then
        if [ "x${skip_build}" = "xCadfael" ]; then
            build_cadfael=0
        elif [ "x${skip_build}" = "xBayeux" ]; then
            build_bayeux=0
        elif [ "x${skip_build}" = "xChannel" ]; then
            build_channel=0
        elif [ "x${skip_build}" = "xFalaise" ]; then
            build_falaise=0
        elif [ "x${skip_build}" = "xChevreuse" ]; then
            build_chevreuse=0
        else
            pkgtools__msg_error "'${skip_build}' package is not known! Abort!"
            return 1
        fi
    fi

    # Cadfael...
    if [ ${build_cadfael} -eq 1 ]; then
        do_build_cadfael
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Building Cadfael components failed !"
            return 1
        fi
    fi

    do_source_cadfael
    if [ $? -ne 0 ]; then
	pkgtools__msg_error "Sourcing Cadfael failed !"
	return 1
    fi

    # Bayeux...
    if [ ${build_bayeux} -eq 1 ]; then
        do_build_bayeux
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Building Bayeux components failed !"
            return 1
        fi
    fi

    do_source_bayeux
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Sourcing Bayeux failed !"
        return 1
    fi

    # Channel...
    if [ ${build_channel} -eq 1 ]; then
        do_build_channel
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Building Channel components failed !"
            return 1
        fi
    fi

    do_source_channel
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Sourcing Channel failed !"
        return 1
    fi

    # Falaise...
    if [ ${build_falaise} -eq 1 ]; then
        do_build_falaise
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Building Falaise components failed !"
            return 1
        fi
    fi

    do_source_falaise
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Sourcing Falaise failed !"
        return 1
    fi

    # Chevreuse...
    if [ ${build_chevreuse} -eq 1 ]; then
        do_build_chevreuse
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Building Chevreuse components failed !"
            return 1
        fi
    fi

    do_source_chevreuse
    if [ $? -ne 0 ]; then
        pkgtools__msg_error "Sourcing Chevreuse failed !"
        return 1
    fi

    __pkgtools__at_function_exit
    return 0
}

function do_reset ()
{
    __pkgtools__at_function_enter do_reset

    local directory_list="
/scratch/snsw.d/cadfael/build/${cadfael_version}     \
/scratch/snsw.d/cadfael/install/${cadfael_version}   \
/scratch/snsw.d/bayeux/build/${bayeux_version}       \
/scratch/snsw.d/bayeux/install/${bayeux_version}     \
/scratch/snsw.d/channel/build/${channel_version}     \
/scratch/snsw.d/channel/install/${channel_version}   \
/scratch/snsw.d/falaise/build/${falaise_version}     \
/scratch/snsw.d/falaise/install/${falaise_version}   \
/scratch/snsw.d/chevreuse/build/${chevreuse_version} \
/scratch/snsw.d/chevreuse/install/${chevreuse_version}
"

    for idir in ${directory_list}
    do
        if [ -d "${idir}" ]; then
            pkgtools__msg_notice "Remove directory ${idir}"
            rm -rf ${idir}
        fi
    done

    __pkgtools__at_function_exit
    return 0
}

function main ()
{
    __pkgtools__at_function_enter main

    # Some checks...
    if [ -z "${action_mode}" ]; then
	pkgtools__msg_error "Missing running mode !"
	print_usage
	__pkgtools__at_function_exit
	return 1
    fi

    if [ ${skip_third_party_software} -eq 0 ]; then
        do_install_third_party_software
        if [ $? -ne 0 ]; then
            pkgtools__msg_error "Installation of third part software fails"
            __pkgtools__at_function_exit
            return 1
        fi
    fi

    if [ ! -z "${config_file}" ]; then
      parse_config_file "${config_file}"
      if [ $? -ne 0 ]; then
        pkgtools__msg_error "Parsing config file ${config_file} fails !"
        __pkgtools__at_funtion_exit
        return 1
      fi
    fi

    if [ "${action_mode}" = "build" ]; then
	do_build $@
	if [ $? -ne 0 ]; then
	    pkgtools__msg_error "Build failed !"
            __pkgtools__at_function_exit
	    return 1
	fi
    elif [ "${action_mode}" = "reset" ]; then
	do_reset $@
	if [ $? -ne 0 ]; then
	    pkgtools__msg_error "Reset failed !"
            __pkgtools__at_function_exit
	    return 1
	fi

    fi

    __pkgtools__at_function_exit
    return 0
}

#######################################

main $@
if [ $? -ne 0 ]; then
    my_exit 1
fi
my_exit 0

# end of cmake_snsw
